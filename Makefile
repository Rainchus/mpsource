# Makefile to rebuild Mario Party (US) split image

### Build Options ###

# If COMPARE is 1, check the output sha1sum when building 'all'
COMPARE ?= 1

# Microcode
GRUCODE_CFLAGS := -DF3DEX_GBI_2
GRUCODE_ASFLAGS := --defsym F3DEX_GBI_2=1

################ Target Executable and Sources ###############

# BUILD_DIR is location where all build artifacts are placed
BUILD_DIR = build

# Directories containing source files
SRC_DIRS := src src/overlays src/overlays/ov054
ASM_DIRS := asm asm/data asm/libs asm/overlays

# Source code files
C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))

# Object files
O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o))

include baserom_files.mk

##################### Compiler Options #######################
CROSS = mips-linux-gnu-
CC = $(CROSS)gcc
LD = $(CROSS)ld
CPP       := cpp -P
OBJDUMP = $(CROSS)objdump
OBJCOPY = $(CROSS)objcopy --pad-to=0x2000000 --gap-fill=0xFF

OLD_ASFLAGS := -G 0 -I include -mips2 $(GRUCODE_ASFLAGS)
NEW_ASFLAGS := -G 0 -I include -mips3 -mabi=32 $(GRUCODE_ASFLAGS)

# Doesn't need -mfix4300?
CFLAGS  := -O1 -G 0 -quiet -mcpu=r4300 -mips2

LDFLAGS = undefined_syms.txt -T $(LD_SCRIPT) -Map $(BUILD_DIR)/mp1.us.map

# Check code syntax with host compiler
CC_CHECK := gcc -fsyntax-only -fsigned-char -nostdinc -fno-builtin -I include -I $(BUILD_DIR)/include -I src\
	-std=gnu90 -Wall -Wextra -Wno-format-security -Wno-unused-parameter -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast $(GRUCODE_CFLAGS)

####################### Other Tools #########################

# N64 tools
TOOLS_DIR = tools
OLD_AS = $(TOOLS_DIR)/marioparty-binutils-2.7-as
NEW_AS = $(CROSS)as
CC1 = $(TOOLS_DIR)/mips-cc1
N64CKSUM = $(TOOLS_DIR)/n64cksum
N64GRAPHICS = $(TOOLS_DIR)/n64graphics
EMULATOR = mupen64plus
EMU_FLAGS = --noosd
LOADER = loader64
LOADER_FLAGS = -vwf

SHA1SUM = sha1sum

######################## Targets #############################

default: all

# file dependencies generated by splitter
MAKEFILE_SPLIT = Makefile.split
include $(MAKEFILE_SPLIT)

all: $(BUILD_DIR)/$(TARGET).z64
ifeq ($(COMPARE),1)
	@$(SHA1SUM) -c $(TARGET).sha1
endif

clean:
	$(RM) -r $(BUILD_DIR)
	$(RM) bin/*.u.bin

$(BUILD_DIR):
	mkdir $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS))

# Pre-process .c files with the modern cpp.
$(BUILD_DIR)/%.i: %.c $(BUILD_DIR)
	@$(CC_CHECK) -MMD -MP -MT $@ -MF $@.d $<
	$(CPP) -MMD -MP -MT $@ -MF $@.d -I include/ -o $@ $<

# Go from .i to .s...
$(BUILD_DIR)/src/%.s: $(BUILD_DIR)/src/%.i
	$(CC1) $(CFLAGS) -o $@ $<

# Run a separate assembler for src and asm .s files.
$(BUILD_DIR)/asm/%.o: asm/%.s
	$(NEW_AS) $(NEW_ASFLAGS) -o $@ $<

$(BUILD_DIR)/src/%.o: $(BUILD_DIR)/src/%.s
	$(OLD_AS) $(OLD_ASFLAGS) -o $@ $<

# Continue the rest of the build...
$(BUILD_DIR)/$(TARGET).elf: assets $(O_FILES) $(LD_SCRIPT)
	$(LD) $(LDFLAGS) -o $@ $(O_FILES) $(LIBS)

$(BUILD_DIR)/$(TARGET).bin: $(BUILD_DIR)/$(TARGET).elf
	$(OBJCOPY) $< $@ -O binary

# final z64 updates checksum
$(BUILD_DIR)/$(TARGET).z64: $(BUILD_DIR)/$(TARGET).bin
	$(N64CKSUM) $< $@

$(BUILD_DIR)/$(TARGET).hex: $(TARGET).z64
	xxd $< > $@

$(BUILD_DIR)/$(TARGET).objdump: $(BUILD_DIR)/$(TARGET).elf
	$(OBJDUMP) -D $< > $@

test: $(TARGET).z64
	$(EMULATOR) $(EMU_FLAGS) $<

load: $(TARGET).z64
	$(LOADER) $(LOADER_FLAGS) $<

assets: $(MYSTERY_FILE) $(MAINFS_FILE) $(STRINGS_FILE) $(HVQ_FILE) $(AUDIO_FILES)

EXTRACT_ASSETS := python extract_baserom.py

$(MYSTERY_FILE):
	$(EXTRACT_ASSETS)

$(MAINFS_FILE):
	$(EXTRACT_ASSETS)

$(STRINGS_FILE):
	$(EXTRACT_ASSETS)

$(HVQ_FILE):
	$(EXTRACT_ASSETS)

$(AUDIO_FILES):
	$(EXTRACT_ASSETS)

.PHONY: all clean default test load assets
